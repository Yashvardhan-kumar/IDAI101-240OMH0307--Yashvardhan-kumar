# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/166yp-VSVnIkpyMJCc0FZm8PU_8LWAaSc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from sklearn.cluster import KMeans
from mlxtend.frequent_patterns import apriori, association_rules
from sklearn.preprocessing import StandardScaler

# Load Dataset
file_path = "amazon.csv"
df = pd.read_csv(file_path)

# Data Cleaning & Preprocessing
def clean_data(df):
    df = df.copy()
    df.dropna(inplace=True)

    # Convert currency and percentage columns
    for col in ['discounted_price', 'actual_price']:
        df[col] = df[col].replace('[^0-9.]', '', regex=True).astype(float)
    df['discount_percentage'] = df['discount_percentage'].replace('%', '', regex=True).astype(float)
    df['rating'] = pd.to_numeric(df['rating'], errors='coerce')
    df['rating_count'] = df['rating_count'].replace(',', '', regex=True).astype(float)

    return df

df = clean_data(df)

# Exploratory Data Analysis (EDA)
def plot_eda(df):
    st.subheader("Exploratory Data Analysis")

    fig, ax = plt.subplots(figsize=(10, 5))
    sns.histplot(df['discounted_price'], bins=50, kde=True, ax=ax)
    ax.set_title("Distribution of Discounted Prices")
    st.pyplot(fig)

    fig, ax = plt.subplots(figsize=(10, 5))
    sns.scatterplot(x=df['actual_price'], y=df['discounted_price'], ax=ax)
    ax.set_title("Actual Price vs Discounted Price")
    st.pyplot(fig)

    fig, ax = plt.subplots(figsize=(8, 5))
    sns.heatmap(df[['discounted_price', 'actual_price', 'rating', 'rating_count']].corr(), annot=True, cmap='coolwarm', ax=ax)
    ax.set_title("Correlation Matrix")
    st.pyplot(fig)

# Customer Segmentation (K-Means Clustering)
def customer_segmentation(df):
    st.subheader("Customer Segmentation with K-Means")
    features = df[['discounted_price', 'actual_price', 'rating', 'rating_count']]
    scaler = StandardScaler()
    scaled_features = scaler.fit_transform(features)

    kmeans = KMeans(n_clusters=3, random_state=42)
    df['customer_segment'] = kmeans.fit_predict(scaled_features)

    fig, ax = plt.subplots(figsize=(8, 5))
    sns.scatterplot(x=df['discounted_price'], y=df['actual_price'], hue=df['customer_segment'], palette='viridis', ax=ax)
    ax.set_title("Customer Segmentation Clusters")
    st.pyplot(fig)
    return df

df = customer_segmentation(df)

# Market Basket Analysis (Association Rule Mining)
def market_basket_analysis(df):
    st.subheader("Market Basket Analysis")
    basket = df.groupby(['user_id', 'product_name'])['category'].count().unstack().fillna(0)
    basket = basket.applymap(lambda x: 1 if x > 0 else 0)

    frequent_itemsets = apriori(basket, min_support=0.002, use_colnames=True)
    if frequent_itemsets.empty:
        st.write("No frequent itemsets found. Try lowering min_support.")
    else:
        rules = association_rules(frequent_itemsets, metric='lift', min_threshold=1.0)
        st.write(rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']].head())

market_basket_analysis(df)

# Streamlit App Layout
st.title("Amazon Customer Segmentation & Market Basket Analysis")
plot_eda(df)